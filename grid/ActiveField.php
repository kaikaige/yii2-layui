<?php
namespace kaikaige\layui\grid;

use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\validators\RequiredValidator;
use yii\validators\StringValidator;
use yii\web\View;

class ActiveField extends \yii\widgets\ActiveField
{
    public $labelOptions = ['class' => 'layui-form-label'];

    public $inputOptions = ['class' => 'layui-input', 'lay-verType' => 'tips'];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->inputOptions['placeholder'] = $this->model->getAttributeLabel($this->attribute);
//        $this->addValidate();
    }

    public function begin() {
        return '';
    }

    public function end()
    {
        return '';
    }


    public function textInput($options = [])
    {
        $options = array_merge($this->inputOptions, $options);
        return parent::textInput($options);
    }

    public function radio($rows = [], $enclosedByLabel = true)
    {
        $this->parts['{input}'] = "";
        foreach ($rows as $value=>$title) {
            $options = [];
            $options['title'] = $title;
            if (!is_null($this->model->{$this->attribute}) && $this->model->{$this->attribute} == $value) {
                $options['checked'] = 'checked';
            }
            $this->parts['{input}'] .= Html::input('radio', Html::getInputName($this->model, $this->attribute), $value, $options);
        }
        return $this;
    }

    /**
     * @param array $options
     * @date 2019-10-28 00:32
     * @author gaokai
     * @return \yii\widgets\ActiveField
     * @modified_date 2019-10-28 00:32
     * @modified_user gaokai
     */
    public function editInput($options = [])
    {
        $options['style'] = 'display:none;';
        return parent::textarea($options);
    }

    public function checkboxList($items, $options = [])
    {
        $html = '';
        foreach ($items as $val=>$item) {
            $html .= Html::tag('input', '',[
                'type' => 'checkbox',
                'name' => Html::getInputName($this->model, $this->attribute).'[]',
                'value' => $val,
//                'lay-skin'=>"primary",
                'title' => $item,
            ]);
        }
        $this->parts['{input}'] = $html;
        return $this;
    }

    public function switchInput($options = []) {
        $options = [
            'lay-skin' => 'switch',
            'lay-filter' => 'switchTest',
            'lay-text' => 'ON|OFF'
        ];
        return parent::checkbox($options, false);
    }

    public function uploadFile() {
        $this->parts['{input}'] = Html::button('点击上传', ['class'=>'layui-btn layui-btn-sm upload-file']);
        return $this;
    }

    public function dropDownList($items, $options = [])
    {
        $this->inputOptions = ArrayHelper::merge($this->inputOptions, $options);
        $html = '<select name='.Html::getInputName($this->model, $this->attribute).' '.Html::renderTagAttributes($this->inputOptions).'>';
        foreach ($items as $key=>$item) {
            $html .= "<option value='$key'";
            if (!is_null($this->model->{$this->attribute}) && $this->model->{$this->attribute} == $key) {
                $html .= " selected";
            }
            $html .= ">$item</option>";
        }
        $html .= '<select>';
        $this->parts['{input}'] = $html;
        return $this;
    }

    public function dateInput($options = []) {
        $options = [
            'class' => 'layui-input date-icon',
            'readonly' => 'readonly',
            'lay-verType' => 'tips',
        ];
        return parent::textInput($options, false);
    }

    private function addValidate() {
        $validators = $this->model->getActiveValidators($this->attribute);
        $verify = '';
        foreach ($validators as $validator) {
            if ($validator->when === null) {
                if ($validator instanceof RequiredValidator) {
                    $verify .= 'required|';
                }
                if ($validator instanceof StringValidator) {
                    $this->inputOptions['maxlength'] = $validator->max;
                    $this->inputOptions['minlength'] = $validator->min;
                }

            }
        }
        $this->inputOptions['lay-verify'] = rtrim($verify, '|');
    }
}