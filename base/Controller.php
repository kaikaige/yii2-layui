<?php

namespace kaikaige\layui\base;

use kaikaige\layui\components\SearchModel;
use Yii;
use yii\db\ActiveRecord;
use yii\filters\ContentNegotiator;
use yii\web\BadRequestHttpException;
use yii\web\Response;

class Controller extends \yii\web\Controller
{
    /**
     * @var ActiveRecord
     */
    protected $modelClass;

    /**
     * 是否软删除
     * @var bool
     */
    protected $softDelete = false;

    /**
     * @var string|array the configuration for creating the serializer that formats the response data.
     */
    public $serializer = 'yii\rest\Serializer';

    public $layout = "@kaikaige/layui/views/layouts/main";

    public $enableCsrfValidation = false;
    
    /**
     * Lists all GoodsType models.
     * @return mixed
     */
    public function actionIndex()
    {
        /* @var $model ActiveRecord*/
        $model = new $this->modelClass;
        if (Yii::$app->request->isAjax) {
            $searchModel = new SearchModel([
                'model' => $this->modelClass,
                'defaultOrder' => ['id' => SORT_DESC],
                'scenario' => 'default',
            ]);
            return $searchModel->ajaxSearch( Yii::$app->request->get($model->formName()));
        } else {
            return $this->render('index', [
                'searchModel' => $model,
            ]);
        }
    }

    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    public function actionCreate()
    {
        if (Yii::$app->request->isPost) {
            /* @var $model ActiveRecord */
            $model = new $this->modelClass();
            $model->load(Yii::$app->request->post());
            $model->save();
            return $model;
        } else {
            return $this->render('create', [
                'model' => new $this->modelClass
            ]);
        }
    }

    public function actionUpdate($id)
    {
        if (Yii::$app->request->isPost) {
            $model = $this->findModel($id);
            $model->load(Yii::$app->request->post());
            $model->save();
            return $model;
        } else {
            return $this->render('update', [
                'model' => $this->findModel($id),
            ]);
        }
    }

    public function actionDelete($id)
    {
        if ($this->softDelete) {
            /* @var $model ActiveRecord */
            $model = $this->findModel($id);
            $model->is_deleted = 1;
            $model->save();
        } else {
            $this->findModel($id)->delete();
        }
    }

    /**
     * 批量删除
     */
    public function actionDeleteBatch() {
        $ids = Yii::$app->request->post('data');
        if (count($ids) <= 0) {
            throw new BadRequestHttpException("选中数据为空");
        }
        $this->modelClass::deleteAll(["id" => $ids]);
    }

    /**
     * @des 修改属性
     * @param $id
     * @date 2019-12-08 14:37
     * @author gaokai
     * @return ActiveRecord|null
     * @modified_date 2019-12-08 14:37
     * @modified_user gaokai
     */
    public function actionUpdateAttribute($id) {
        $model = $this->findModel($id);
        $attribute = Yii::$app->request->post('attribute');
        $value = Yii::$app->request->post('value');
        $model->$attribute = $value;
        $model->save();
        return $model;
    }

    protected function findModel($id)
    {
        if (($model = $this->modelClass::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    public function afterAction($action, $result)
    {
        if (Yii::$app->request->isAjax) {
            return Yii::createObject($this->serializer)->serialize($result);
        }
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        $behaviors = [];
        if (Yii::$app->request->isAjax) {
            $behaviors['contentNegotiator'] = [
                'class' => ContentNegotiator::className(),
                'formats' => [
                    'application/json' => Response::FORMAT_JSON,
                    'application/xml' => Response::FORMAT_XML,
                ],
            ];
        }
        return $behaviors;
    }

    public function beforeAction($action)
    {
        if(parent::beforeAction($action)) {
            return true;
        }
        return false;
    }
}
